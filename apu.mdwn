% PHP
% Tuomas Starck
% 2012/I

[php]:     http://fi2.php.net
[fractal]: http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design

# PHP

- Imperatiivinen
- Dynaamisesti tyypitetty
- Tukee olioita
    + ei pakota olio-ohjelmointiin

# Kielen suunnittelu

*PHP ei ole ohjelmointikielistä elegantein*

[PHP: a fractal of bad design][fractal]

Mutta tsohan kannalta tämä ei ole kriittistä, sillä pienessä
projektissa tuskin törmää kaikkein pahimpiin ongelmiin

# Perusteet

- [PHP on hyvin dokumentoitu][php]
- **Aina** löytyy valmis funktio
- Monet Javasta tutut toimintamallit toimivat
    + oliotsuunnittelu on ok

# Syntaksi

- Aloitus- ja lopetustagit:
  `<?php` ja `?>`
- Kommentit: `// ` ja `/* */`
- Dynaaminen tyypitys:
    - boolean, integet, float, string
    - array, object
    - ja muutama hassu tyyppi
- Taikamuuttujat (superglobals)

# Tagit

PHP-tulkki ei suorita koodia, joka ei ole **php**-kooditagin sisällä

```php
Tämä ei ole koodia.

<?php
echo "Tämä koodi suoritetaan.";
?>

Jälleen pelkkää tekstiä.
```

Kooditagien ulkopuolinen teksti lähetetään selaimelle sellaisenaan

# Array

- Eli assosiatiivinen taulukko
- Toimittaa *listan*, *taulukon*, *settien* yms virkaa
- Avain luodaan tarvittaessa

```php
<?php
$muuttuja = array(
    "yksi"  => 1,
    "kaksi" => 2
);

$toinen = array("ruusu", "tulppaani");

echo $muuttuja["yksi"]; // -> 1

echo $toinen[1];        // -> tulppaani
?>
```

# Oliot

```php
<?php
class KUKKA {
  private $sana;

  function __construct() {
    $this->sana = "neilikka";
  }

  public function sano() {
    echo $this->sana;
  }
}

$olio = new KUKKA;
$olio->sano();      // tulostaa: neilikka
?>
```

Konstruktorin parina on toki `__destruct`

# Taikamuuttujat

Eivät vaadi `global` avainsanan käyttöä

Kaikki käyttäjältä tuleva tieto on avain/arvo-pareja,
jotka saadaan indeksoimalla seuraavia muuttujia:

- `$_GET`
    + osoiterivin tiedot
- `$_POST`
    + lomakkeesta lähetetyt tiedot
- `$_COOKIE`
    + evästeiden tiedot

# Koodin sisällyttäminen

komento         tekee
-------         -----
`include`       Vähän ku `import`
`require`       Heittää virheen jossei onnistu
`include_once`  Tarkistaa, ettei tule tehtyä kahdesti
`require_once`  Samoin

Valitse aina `require_once`

# Goto

PHP:ssä on `goto` operaattori. Älä käytä.

# Funktiot

```php
<?php
function fn_nimi($arg1, $arg2, $arg3="oletus") {
  return $arg1.$arg2.$arg3;
}

echo fn_nimi("Tämä ", "on ");  // tulostaa: Tämä on oletus
?>
```

- Tukee parametrien oletusarvoja
- Paluutyypit dynaamisia
- Aivan posketon määrä sisäänrakennettuja funktioita
    - `mysql_escape_string` / `mysql_real_escape_string`
    - `gzgetss`
    - ...

# Kapselointi ja jako

Eri kielien vallaton sekoittaminen saa aikaan kaoottisen sopan

Tapoja *kapseloida* ja *ositella* koodia:

- luokat
- ketjutus
- templaatit
- staattiset tiedostot

# Debugaus

- [var\_dump()](http://php.net/manual/en/function.var-dump.php)
    + tulostaa mielivaltaisen muuttujan sisällön
- [error\_log()](http://php.net/manual/en/function.error-log.php)
    + tulostaa virheviestin logiin
